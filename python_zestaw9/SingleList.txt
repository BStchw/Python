class Node:
    """Klasa reprezentująca węzeł listy jednokierunkowej."""

    def __init__(self, data=None, next=None):
        self.data = data
        self.next = next

    def __str__(self):
        return str(self.data)   # bardzo ogólnie

class SingleList:
    """Klasa reprezentująca całą listę jednokierunkową."""

    def __init__(self):
        self.length = 0   # nie trzeba obliczać za każdym razem
        self.head = None
        self.tail = None

    def is_empty(self):
        #return self.length == 0
        return self.head is None

    def count(self):   # tworzymy interfejs do odczytu
        return self.length

    def insert_head(self, node):
        if self.head:   # dajemy na koniec listy
            node.next = self.head
            self.head = node
        else:   # pusta lista
            self.head = self.tail = node
        self.length += 1

    def insert_tail(self, node):   # klasy O(1)
        if self.head:   # dajemy na koniec listy
            self.tail.next = node
            self.tail = node
        else:   # pusta lista
            self.head = self.tail = node
        self.length += 1

    def remove_head(self):   # klasy O(1)
        if self.is_empty():
            raise ValueError("pusta lista")
        node = self.head
        if self.head == self.tail:   # self.length == 1
            self.head = self.tail = None
        else:
            self.head = self.head.next
        node.next = None   # czyszczenie łącza
        self.length -= 1
        return node   # zwracamy usuwany node

    def remove_tail(self):   # klasy O(n)
        if self.is_empty():
            raise ValueError("pusta lista")
        t = self.tail
        if self.tail == self.head:
            self.tail = self.head = None
        else:
            node = self.head
            n = node.next
            while(n.next != self.tail):
                node = node.next
                n = node.next

            self.tail = n
            n.next = None
            self.length -= 1
        return t
        # Zwraca cały węzeł, skraca listę.
        # Dla pustej listy rzuca wyjątek ValueError.

    def join(self, other):
        self.tail.next = other.head
        self.tail = other.tail

        other.head = None
        other.tail = None
        # klasy O(1)
        # Węzły z listy other są przepinane do listy self na jej koniec.
        # Po zakończeniu operacji lista other ma być pusta.

    def clear(self):
        if self.is_empty():
            raise ValueError("pusta lista")

        if self.tail == self.head:
            self.tail = self.head = None
        else:
            while(self.head != None):
                self.remove_head()
    # czyszczenie listy

alist = SingleList()
alist.insert_head(Node(11))   # [11]
alist.insert_head(Node(22))   # [22, 11]
alist.insert_tail(Node(33))   # [22, 11, 33]

alist2 = SingleList()
alist2.insert_head(Node(1))     #[1]
alist2.insert_head(Node(2))     #[2][2]
alist2.insert_tail(Node(3))     #[2][1][3]

alist.join(alist2)              #[22][11][33][2][1][3]
print("head {}".format(alist.head))   # odczyt atrybutu
print("tail {}".format(alist.tail))  # wykorzystujemy interfejs

print(alist2.is_empty())

alist.remove_tail()             #[22][11][33][2][1]

print("head {}".format(alist.head))   # odczyt atrybutu
print("tail {}".format(alist.tail))  # wykorzystujemy interfejs

alist.clear()

print(alist.is_empty())
